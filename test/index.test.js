//Test file for index.js

const Finance = require('../index.js');

const finance = new Finance();

test("PV Function (5 Test Cases / Match Excel to 8 decimal places)", () => {
  expect(finance.PV(.0525, 5, 6000)).toBeCloseTo(-25798.316343571, 8);
  expect(finance.PV(0.0688, 10, 150000, 10000)).toBeCloseTo(-1064546.969721610, 8);
  expect(finance.PV(0.006875, 60, 3250, 0, 1)).toBeCloseTo(-160438.486624723, 8);
  expect(finance.PV(0.11 / 12, 180, 525, 50)).toBeCloseTo(-46200.1919210731, 8);
  expect(finance.PV(0.010625, 8, 32.5, 0, 1)).toBeCloseTo(-250.631442440053, 8);
});

test("PMT Function (5 Test Cases / Match Excel to 8 decimal places)", () => {
  expect(finance.PMT(0.0525, 5, -10000)).toBeCloseTo(2325.7331680465, 8);
  expect(finance.PMT(0.006875, 60, -150000, 0, 1)).toBeCloseTo(3038.5477341250, 8);
  expect(finance.PMT(0.0275, 10, -25566, 500)).toBeCloseTo(2914.88183332968, 8);
  expect(finance.PMT(0.025/12, 180, -55555, 1000, 1)).toBeCloseTo(365.0895830102480, 8);
  expect(finance.PMT(0.22, 1, -15000)).toBeCloseTo(18300.0, 8);
});

test("FV Function (5 Test Cases / Match Excel to 8 decimal places)", () => {
  expect(finance.FV(0.0525, 8, 6000, -15000)).toBeCloseTo(-35221.99955623980, 8);
  expect(finance.FV(0.005625, 60, 500, -30000, 1)).toBeCloseTo(6237.618899257980, 8);
  expect(finance.FV(0.11/12, 24, 8025, -250000)).toBeCloseTo(96870.88840793330, 8);
  expect(finance.FV(0.125, 6, 58, -5000, 1)).toBeCloseTo(9600.18907928466, 8);
  expect(finance.FV(0.07/12, 240, 1500, -200000)).toBeCloseTo(26357.78005816120, 8);
});

test("IPMT Function (12 Test Cases / Match Excel to 8 decimal places)", () => {
  expect(finance.IPMT(0.02, 5, 5, -608926, 37115, 0)).toBeCloseTo(3121.01575472915, 8);
  expect(finance.IPMT(0.0025, 9, 24, -62088, 16679, 0)).toBeCloseTo(118.13247244596, 8);
  expect(finance.IPMT(0.0075, 1, 36, -303575, 0, 1)).toBeCloseTo(0, 8);
  expect(finance.IPMT(0.0083333333333333, 56, 240, -244184, 40099, 1)).toBeCloseTo(1863.87630524189, 8);
  expect(finance.IPMT(0.05, 4, 8, -204252, 4793, 1)).toBeCloseTo(6590.64284869969, 8);
  expect(finance.IPMT(0.00916666666666667, 10, 60, -276452, 0, 0)).toBeCloseTo(2236.57965430518, 8);
  expect(finance.IPMT(0.0158333333333333, 98, 180, -740363, 1255, 1)).toBeCloseTo(8939.86781612986, 8);
  expect(finance.IPMT(0.0225, 4, 16, -324779, 0, 1)).toBeCloseTo(5993.04338111598, 8);
  expect(finance.IPMT(0.015, 36, 48, -518630, 39718, 0)).toBeCloseTo(3071.36493572514, 8);
  expect(finance.IPMT(0.00333333333333333, 244, 360, -490152, 36758, 0)).toBeCloseTo(820.609615385237, 8);
  expect(finance.IPMT(0.0525, 0, 24, -10000)).toBe("Error - invalid Period");
  expect(finance.IPMT(0.0525, 25, 24, -10000)).toBe("Error - invalid Period");
});

test("PMT Function (12 Test Cases / Match Excel to 8 decimal places)", () => {
  expect(finance.PPMT(0.02, 5, 5, -608926, 37115, 0)).toBeCloseTo(118935.787736457, 8);
  expect(finance.PPMT(0.0025, 9, 24, -62088, 16679, 0)).toBeCloseTo(1875.2988823337, 8);
  expect(finance.PPMT(0.0075, 1, 36, -303575, 0, 1)).toBeCloseTo(9581.74078634391, 8);
  expect(finance.PPMT(0.00833333333333333, 56, 240, -244184, 40099, 1)).toBeCloseTo(420.708247831785, 8);
  expect(finance.PPMT(0.05, 4, 8, -204252, 4793, 1)).toBeCloseTo(23028.6983173609, 8);
  expect(finance.PPMT(0.00916666666666667, 10, 60, -276452, 0, 0)).toBeCloseTo(3774.15668897321, 8);
  expect(finance.PPMT(0.0158333333333333, 98, 180, -740363, 1255, 1)).toBeCloseTo(3324.09497421923, 8);
  expect(finance.PPMT(0.0225, 4, 16, -324779, 0, 1)).toBeCloseTo(17866.4226038686, 8);
  expect(finance.PPMT(0.015, 36, 48, -518630, 39718, 0)).toBeCloseTo(11592.444876619, 8);
  expect(finance.PPMT(0.00333333333333333, 244, 360, -490152, 36758, 0)).toBeCloseTo(1466.48935600409, 8);
  expect(finance.PPMT(0.0525, 0, 24, -10000)).toBe("Error - invalid Period");
  expect(finance.PPMT(0.0525, 25, 24, -10000)).toBe("Error - invalid Period");
});

test("RATE Function (160 Test Cases / Match Excel to 8 decimal places)", () => {
  expect(finance.RATE(60, 500, -25000)).toBeCloseTo(0.00618341316125388, 8);
  expect(finance.RATE(312, 5113, -1501935, 2368, 0, 0.198)).toBeCloseTo(0.000398266895514718, 8);
  expect(finance.RATE(276, 1991, -446386, 3135, 1, 0.047)).toBeCloseTo(0.00160511310935709, 8);
  expect(finance.RATE(223, 13549, -2888300, 1933, 1, 0.092)).toBeCloseTo(0.00041475010529662, 8);
  expect(finance.RATE(126, 20238, -2140351, 7442, 1, 0.081)).toBeCloseTo(0.00293553013208551, 8);
  expect(finance.RATE(214, 21362, -4182079, 7276, 0, 0.141)).toBeCloseTo(0.000854961958127848, 8);
  expect(finance.RATE(180, 23960, -3649167, 1522, 0, 0.116)).toBeCloseTo(0.00190536379381439, 8);
  expect(finance.RATE(164, 15459, -2192401, 775, 0, 0.108)).toBeCloseTo(0.00181051005231611, 8);
  expect(finance.RATE(217, 8596, -1734632, 3621, 1, 0.136)).toBeCloseTo(0.000698349389820266, 8);
  expect(finance.RATE(311, 15144, -4029036, 383, 1, 0.089)).toBeCloseTo(0.00103602795818093, 8);
  expect(finance.RATE(276, 7505, -2015447, 9386, 0, 0.057)).toBeCloseTo(0.000230511998597642, 8);
  expect(finance.RATE(11, 22492, -229079, 5524, 1, 0.144)).toBeCloseTo(0.0199023449392075, 8);
  expect(finance.RATE(177, 8311, -1384409, 1432, 1, 0.049)).toBeCloseTo(0.000707836232406421, 8);
  expect(finance.RATE(198, 19389, -3074559, 9872, 0, 0.115)).toBeCloseTo(0.00234465904271924, 8);
  expect(finance.RATE(200, 5958, -1039506, 4342, 1, 0.126)).toBeCloseTo(0.0014395827447051, 8);
  expect(finance.RATE(138, 21076, -2432309, 6287, 1, 0.036)).toBeCloseTo(0.00272546449141395, 8);
  expect(finance.RATE(330, 15044, -4486044, 8313, 0, 0.148)).toBeCloseTo(0.000632614705765373, 8);
  expect(finance.RATE(331, 7598, -2356970, 5476, 0, 0.15)).toBeCloseTo(0.000407683800118725, 8);
  expect(finance.RATE(134, 15758, -1895172, 4934, 0, 0.069)).toBeCloseTo(0.00166475629935309, 8);
  expect(finance.RATE(33, 5147, -146194, 1578, 0, 0.002)).toBeCloseTo(0.00957576368703414, 8);
  expect(finance.RATE(344, 17589, -5523277, 649, 0, 0.063)).toBeCloseTo(0.000537595095864107, 8);
  expect(finance.RATE(22, 5932, -123577, 6580, 0, 0.086)).toBeCloseTo(0.00881917963733835, 8);
  expect(finance.RATE(155, 20842, -3102968, 4446, 1, 0.137)).toBeCloseTo(0.000544239861100565, 8);
  expect(finance.RATE(285, 1216, -321116, 8776, 1, 0.023)).toBeCloseTo(0.000708268029668575, 8);
  expect(finance.RATE(336, 9961, -3108668, 9163, 0, 0.078)).toBeCloseTo(0.000459213529829167, 8);
  expect(finance.RATE(122, 9812, -1004763, 5725, 0, 0.154)).toBeCloseTo(0.00300716250813055, 8);
  expect(finance.RATE(199, 16086, -2994548, 6580, 1, 0.187)).toBeCloseTo(0.000701558154195127, 8);
  expect(finance.RATE(99, 10266, -1004920, 7226, 0, 0.027)).toBeCloseTo(0.000366219744423884, 8);
  expect(finance.RATE(26, 7904, -184960, 329, 1, 0.007)).toBeCloseTo(0.00874829226787922, 8);
  expect(finance.RATE(243, 9330, -1970357, 5884, 0, 0.157)).toBeCloseTo(0.00119814752062934, 8);
  expect(finance.RATE(103, 11912, -1066742, 0, 1, 0.07)).toBeCloseTo(0.00281578100633434, 8);
  expect(finance.RATE(86, 17673, -1474605, 1223, 1, 0.007)).toBeCloseTo(0.000734028318250167, 8);
  expect(finance.RATE(4, 1727, -5869, 2511, 0, 0.05)).toBeCloseTo(0.185406220575096, 8);
  expect(finance.RATE(287, 4151, -1060234, 2650, 1, 0.168)).toBeCloseTo(0.000846548723340286, 8);
  expect(finance.RATE(302, 11603, -3286101, 7871, 0, 0.189)).toBeCloseTo(0.000442844796976862, 8);
  expect(finance.RATE(243, 2170, -526404, 7031, 1, 0.067)).toBeCloseTo(0.000122376059185961, 8);
  expect(finance.RATE(225, 4009, -734378, 6774, 0, 0.2)).toBeCloseTo(0.00194474982177568, 8);
  expect(finance.RATE(2, 24990, -44133, 5111, 1, 0.181)).toBeCloseTo(0.485204835437238, 8);
  expect(finance.RATE(273, 23745, -6205929, 4999, 1, 0.064)).toBeCloseTo(0.000328398503338196, 8);
  expect(finance.RATE(99, 15832, -1299562, 6818, 0, 0.059)).toBeCloseTo(0.00395329828164559, 8);
  expect(finance.RATE(220, 24954, -4675157, 9526, 0, 0.199)).toBeCloseTo(0.00150966102259892, 8);
  expect(finance.RATE(273, 16430, -3632791, 6724, 1, 0.083)).toBeCloseTo(0.00161997024323132, 8);
  expect(finance.RATE(296, 22275, -5421542, 6321, 1, 0.097)).toBeCloseTo(0.00137991050304564, 8);
  expect(finance.RATE(139, 23048, -2671570, 7518, 0, 0.193)).toBeCloseTo(0.00271016227878625, 8);
  expect(finance.RATE(79, 2121, -144517, 1507, 1, 0.039)).toBeCloseTo(0.00410778535283133, 8);
  expect(finance.RATE(17, 16761, -284078, 2694, 1, 0.077)).toBeCloseTo(0.00154228528490546, 8);
  expect(finance.RATE(200, 12278, -2010763, 613, 0, 0.19)).toBeCloseTo(0.00206310002884818, 8);
  expect(finance.RATE(295, 24390, -6593028, 0, 1, 0.168)).toBeCloseTo(0.000603586362696535, 8);
  expect(finance.RATE(140, 18819, -2303179, 6159, 0, 0.069)).toBeCloseTo(0.00198347493026944, 8);
  expect(finance.RATE(176, 4961, -863645, 13, 1, 0.065)).toBeCloseTo(0.000125316577590557, 8);
  expect(finance.RATE(178, 2843, -422325, 8178, 0, 0.022)).toBeCloseTo(0.00224350641577668, 8);
  expect(finance.RATE(358, 19887, -6295746, 3244, 1, 0.05)).toBeCloseTo(0.000706304002422249, 8);
  expect(finance.RATE(96, 21424, -1860660, 6952, 1, 0.181)).toBeCloseTo(0.00221461071778762, 8);
  expect(finance.RATE(111, 12246, -1208646, 2746, 1, 0.028)).toBeCloseTo(0.00221639698498289, 8);
  expect(finance.RATE(292, 16874, -4640236, 6337, 0, 0.051)).toBeCloseTo(0.000422262379056628, 8);
  expect(finance.RATE(278, 5183, -1345769, 1910, 1, 0.144)).toBeCloseTo(0.000508056995605632, 8);
  expect(finance.RATE(177, 6605, -1092172, 2425, 1, 0.036)).toBeCloseTo(0.000805162847578353, 8);
  expect(finance.RATE(29, 8774, -232902, 6774, 0, 0.058)).toBeCloseTo(0.0076356150275949, 8);
  expect(finance.RATE(222, 6570, -1440544, 9778, 1, 0.178)).toBeCloseTo(0.000172237006664784, 8);
  expect(finance.RATE(355, 18057, -5696196, 7741, 0, 0.009)).toBeCloseTo(0.000683459074363383, 8);
  expect(finance.RATE(308, 11291, -3470454, 0, 1, 0.084)).toBeCloseTo(1.34577251657501E-05, 8);
  expect(finance.RATE(224, 1860, -350204, 7664, 1, 0.01)).toBeCloseTo(0.0017503573417316, 8);
  expect(finance.RATE(218, 5718, -1106688, 6454, 1, 0.096)).toBeCloseTo(0.00116381496000191, 8);
  expect(finance.RATE(34, 20800, -640522, 3092, 1, 0.043)).toBeCloseTo(0.00637600284560152, 8);
  expect(finance.RATE(274, 16705, -4536671, 8707, 0, 0.125)).toBeCloseTo(7.84530576385179E-05, 8);
  expect(finance.RATE(102, 22496, -2008279, 4146, 0, 0.172)).toBeCloseTo(0.00268237833127317, 8);
  expect(finance.RATE(298, 23953, -6626784, 9002, 0, 0.05)).toBeCloseTo(0.000511479154773292, 8);
  expect(finance.RATE(168, 17160, -2451409, 9530, 1, 0.06)).toBeCloseTo(0.00203498648437955, 8);
  expect(finance.RATE(150, 2571, -334290, 1076, 0, 0.068)).toBeCloseTo(0.00197499650556869, 8);
  expect(finance.RATE(82, 19136, -1324237, 5946, 1, 0.118)).toBeCloseTo(0.00441103998256208, 8);
  expect(finance.RATE(245, 10758, -2112477, 318, 0, 0.007)).toBeCloseTo(0.0018726933690712, 8);
  expect(finance.RATE(39, 16533, -530409, 0, 0, 0.05)).toBeCloseTo(0.0101362834500316, 8);
  expect(finance.RATE(317, 14418, -4248981, 2071, 0, 0.146)).toBeCloseTo(0.000467271056656737, 8);
  expect(finance.RATE(263, 15443, -4010723, 7410, 1, 0.055)).toBeCloseTo(0.000110039707289779, 8);
  expect(finance.RATE(207, 18694, -3812444, 7914, 1, 0.159)).toBeCloseTo(0.000164599539324632, 8);
  expect(finance.RATE(162, 6546, -936454, 9829, 0, 0.167)).toBeCloseTo(0.00166295784573264, 8);
  expect(finance.RATE(215, 20521, -4270566, 5711, 1, 0.188)).toBeCloseTo(0.000318084395048042, 8);
  expect(finance.RATE(147, 24624, -3611509, 2972, 1, 0.088)).toBeCloseTo(4.23702182303982E-05, 8);
  expect(finance.RATE(190, 1996, -333318, 9378, 1, 0.187)).toBeCloseTo(0.0016301344362312, 8);
  expect(finance.RATE(285, 1429, -374184, 562, 1, 0.163)).toBeCloseTo(0.000614663464400106, 8);
  expect(finance.RATE(135, 18521, -2097734, 4981, 0, 0.081)).toBeCloseTo(0.00269031322642675, 8);
  expect(finance.RATE(197, 3032, -534447, 5740, 0, 0.07)).toBeCloseTo(0.0012342096488345, 8);
  expect(finance.RATE(29, 14238, -352866, 3315, 0, 0.011)).toBeCloseTo(0.0112854557669366, 8);
  expect(finance.RATE(196, 23909, -3813108, 1284, 0, 0.004)).toBeCloseTo(0.00217422329200727, 8);
  expect(finance.RATE(68, 23751, -1419023, 4026, 0, 0.053)).toBeCloseTo(0.00390656064241712, 8);
  expect(finance.RATE(83, 13770, -957714, 1891, 0, 0.065)).toBeCloseTo(0.00438192844551867, 8);
  expect(finance.RATE(329, 6925, -2146036, 0, 1, 0.193)).toBeCloseTo(0.0003685458175287, 8);
  expect(finance.RATE(283, 8736, -2284339, 1256, 0, 0.068)).toBeCloseTo(0.000567843069743539, 8);
  expect(finance.RATE(90, 11767, -979823, 7750, 1, 0.046)).toBeCloseTo(0.00192680878928167, 8);
  expect(finance.RATE(93, 11249, -911497, 8312, 0, 0.033)).toBeCloseTo(0.00315805963348429, 8);
  expect(finance.RATE(166, 17474, -2331611, 581, 1, 0.118)).toBeCloseTo(0.00275822654220477, 8);
  expect(finance.RATE(235, 10816, -2044793, 3455, 0, 0.109)).toBeCloseTo(0.00192683328162759, 8);
  expect(finance.RATE(241, 1447, -348427, 804, 0, 0.006)).toBeCloseTo(2.60992548339763E-05, 8);
  expect(finance.RATE(12, 16747, -163135, 9594, 0, 0.17)).toBeCloseTo(0.0400297812717098, 8);
  expect(finance.RATE(308, 2803, -810600, 8122, 0, 0.168)).toBeCloseTo(0.000469983346064798, 8);
  expect(finance.RATE(170, 6479, -998907, 9141, 0, 0.013)).toBeCloseTo(0.00125239919399876, 8);
  expect(finance.RATE(204, 24311, -4417707, 8616, 0, 0.054)).toBeCloseTo(0.00116721529757816, 8);
  expect(finance.RATE(38, 10106, -353349, 443, 1, 0.032)).toBeCloseTo(0.00463765117638594, 8);
  expect(finance.RATE(299, 23116, -6874901, 1331, 0, 0.055)).toBeCloseTo(3.68849122449443E-05, 8);
  expect(finance.RATE(194, 12560, -2231576, 8557, 0, 0.067)).toBeCloseTo(0.000949357454944168, 8);
  expect(finance.RATE(154, 10955, -1585617, 5692, 0, 0.001)).toBeCloseTo(0.000850529280201041, 8);
  expect(finance.RATE(274, 13347, -3279101, 8840, 1, 0.154)).toBeCloseTo(0.000831133684832732, 8);
  expect(finance.RATE(264, 8526, -1940591, 6081, 0, 0.033)).toBeCloseTo(0.00116729444344216, 8);
  expect(finance.RATE(132, 6746, -871966, 7825, 1, 0.052)).toBeCloseTo(0.000452613072577277, 8);
  expect(finance.RATE(201, 18794, -3204422, 0, 1, 0.045)).toBeCloseTo(0.00169523874360444, 8);
  expect(finance.RATE(281, 12738, -2958062, 7420, 0, 0.044)).toBeCloseTo(0.00141149645443432, 8);
  expect(finance.RATE(335, 2279, -638649, 1207, 0, 0.183)).toBeCloseTo(0.0011048595374237, 8);
  expect(finance.RATE(318, 24054, -6660746, 4334, 1, 0.004)).toBeCloseTo(0.000897856990200117, 8);
  expect(finance.RATE(272, 19121, -4214494, 9999, 1, 0.155)).toBeCloseTo(0.00162449098764767, 8);
  expect(finance.RATE(156, 3361, -455469, 7011, 0, 0.107)).toBeCloseTo(0.00199083999331736, 8);
  expect(finance.RATE(250, 11048, -2645055, 1043, 0, 0.119)).toBeCloseTo(0.000350211028188046, 8);
  expect(finance.RATE(343, 5509, -1793411, 1349, 1, 0.098)).toBeCloseTo(0.000312287287048883, 8);
  expect(finance.RATE(148, 10148, -1238183, 4836, 1, 0.025)).toBeCloseTo(0.00276046868694027, 8);
  expect(finance.RATE(18, 1513, -23074, 2530, 1, 0.196)).toBeCloseTo(0.0291750575562952, 8);
  expect(finance.RATE(3, 13327, -35170, 8253, 1, 0.057)).toBeCloseTo(0.301775339308948, 8);
  expect(finance.RATE(40, 23011, -850458, 8953, 1, 0.047)).toBeCloseTo(0.00458881338534384, 8);
  expect(finance.RATE(162, 10085, -1611330, 8017, 1, 0.156)).toBeCloseTo(0.000232231763828347, 8);
  expect(finance.RATE(250, 18383, -4170000, 4777, 1, 0.04)).toBeCloseTo(0.00080214926621778, 8);
  expect(finance.RATE(295, 3356, -809929, 9797, 1, 0.194)).toBeCloseTo(0.0014738436492741, 8);
  expect(finance.RATE(333, 19421, -5951216, 0, 1, 0.01)).toBeCloseTo(0.000508195140731337, 8);
  expect(finance.RATE(358, 18653, -6283186, 1031, 0, 0.017)).toBeCloseTo(0.000343697766991371, 8);
  expect(finance.RATE(63, 22743, -1285375, 7580, 0, 0.03)).toBeCloseTo(0.00361422142500317, 8);
  expect(finance.RATE(148, 2248, -298202, 6733, 0, 0.059)).toBeCloseTo(0.0017444982670201, 8);
  expect(finance.RATE(238, 14048, -2790389, 7945, 0, 0.128)).toBeCloseTo(0.00157987893347862, 8);
  expect(finance.RATE(131, 5974, -688583, 3871, 1, 0.167)).toBeCloseTo(0.00208472130286573, 8);
  expect(finance.RATE(212, 15608, -2904479, 1849, 0, 0.108)).toBeCloseTo(0.00125715130764662, 8);
  expect(finance.RATE(78, 16983, -1210806, 329, 0, 0.047)).toBeCloseTo(0.00231826891079059, 8);
  expect(finance.RATE(138, 16963, -2211253, 4960, 0, 0.029)).toBeCloseTo(0.000857215756588474, 8);
  expect(finance.RATE(140, 8648, -1093098, 3862, 0, 0.19)).toBeCloseTo(0.00151801334664837, 8);
  expect(finance.RATE(66, 7039, -450186, 8119, 1, 0.132)).toBeCloseTo(0.00148864318927152, 8);
  expect(finance.RATE(334, 21773, -6495786, 7652, 0, 0.09)).toBeCloseTo(0.000693187549242507, 8);
  expect(finance.RATE(49, 7838, -364485, 2210, 1, 0.103)).toBeCloseTo(0.00243237609252972, 8);
  expect(finance.RATE(260, 3213, -805840, 6932, 0, 0.106)).toBeCloseTo(0.000339006246727423, 8);
  expect(finance.RATE(175, 13484, -2266292, 4717, 0, 0.076)).toBeCloseTo(0.000484238226264152, 8);
  expect(finance.RATE(124, 10818, -1143520, 7239, 0, 0.162)).toBeCloseTo(0.00270502567772839, 8);
  expect(finance.RATE(208, 1087, -181753, 4724, 0, 0.091)).toBeCloseTo(0.00234008359704698, 8);
  expect(finance.RATE(307, 1643, -452626, 9865, 0, 0.092)).toBeCloseTo(0.000831825949827345, 8);
  expect(finance.RATE(240, 13862, -3182541, 0, 0, 0.19)).toBeCloseTo(0.000370898654357767, 8);
  expect(finance.RATE(104, 22230, -2222989, 1619, 1, 0.104)).toBeCloseTo(0.000780335445768033, 8);
  expect(finance.RATE(64, 7317, -403952, 0, 0, 0.169)).toBeCloseTo(0.00467217191171349, 8);
  expect(finance.RATE(184, 24557, -4237329, 6730, 1, 0.018)).toBeCloseTo(0.000725698341393931, 8);
  expect(finance.RATE(213, 5529, -967194, 0, 0, 0.095)).toBeCloseTo(0.00190596968998648, 8);
  expect(finance.RATE(267, 19450, -4405068, 524, 0, 0.002)).toBeCloseTo(0.0012650748178011, 8);
  expect(finance.RATE(236, 24246, -5609652, 0, 0, 0.112)).toBeCloseTo(0.000167988559008855, 8);
  expect(finance.RATE(323, 19394, -5622392, 9624, 1, 0.136)).toBeCloseTo(0.000693154716118348, 8);
  expect(finance.RATE(323, 24515, -7388465, 2226, 0, 0.167)).toBeCloseTo(0.000434313953903733, 8);
  expect(finance.RATE(230, 4072, -770328, 3328, 1, 0.044)).toBeCloseTo(0.00179497243795338, 8);
  expect(finance.RATE(302, 19266, -5801819, 8113, 1, 0.085)).toBeCloseTo(2.81241798927375E-05, 8);
  expect(finance.RATE(130, 14003, -1516279, 4875, 1, 0.17)).toBeCloseTo(0.00296808568570917, 8);
  expect(finance.RATE(300, 13403, -3355734, 858, 0, 0.195)).toBeCloseTo(0.00124183794007236, 8);
  expect(finance.RATE(213, 5529, -967194)).toBeCloseTo(0.00190596968998648, 8);
  expect(finance.RATE(267, 19450, -4405068, 524,)).toBeCloseTo(0.0012650748178011, 8);
  expect(finance.RATE(236, 24246, -5609652)).toBeCloseTo(0.000167988559008855, 8);
  expect(finance.RATE(323, 19394, -5622392, 9624, 1)).toBeCloseTo(0.000693154716118348, 8);
  expect(finance.RATE(323, 24515, -7388465, 2226)).toBeCloseTo(0.000434313953903733, 8);
  expect(finance.RATE(230, 4072, -770328, 3328, 1)).toBeCloseTo(0.00179497243795338, 8);
  expect(finance.RATE(302, 19266, -5801819, 8113, 1)).toBeCloseTo(2.81241798927375E-05, 8);
  expect(finance.RATE(130, 14003, -1516279, 4875, 1)).toBeCloseTo(0.00296808568570917, 8);
  expect(finance.RATE(300, 13403, -3355734, 858)).toBeCloseTo(0.00124183794007236, 8);
  expect(finance.RATE(-1, 333, -1000, 22)).toBe("Error - invalid Period");
});

test("NPER Function (12 Test Cases / Match Excel to 8 decimal places)", () => {
  expect(finance.NPER(0.00166666666666667, 500, -25000)).toBeCloseTo(52.2503198074182, 8);
  expect(finance.NPER(0.0025, 564, -25000)).toBeCloseTo(47.0389585221301, 8);
  expect(finance.NPER(0.0075, 5848, -50000, 564654, 1)).toBeCloseTo(-160.977634983543, 8);
  expect(finance.NPER(0.00833333333333333, 313, -33000, 0, 1)).toBeCloseTo(247.087289465708, 8);
  expect(finance.NPER(0.05, 2500, -15330, 456, 1)).toBeCloseTo(6.89867591269445, 8);
  expect(finance.NPER(0.00916666666666667, 1654, -13546)).toBeCloseTo(8.55253223758902, 8);
  expect(finance.NPER(0.0158333333333333, 515615, -854893, 0, 1)).toBeCloseTo(1.66668098571988, 8);
  expect(finance.NPER(0.0225, 6566, -551321, 9654564, 1)).toBeCloseTo(162.27277971901, 8);
  expect(finance.NPER(0.015, 6468, -56544)).toBeCloseTo(9.44102400572401, 8);
  expect(finance.NPER(0.00333333333333333, 1566, -65448, 546)).toBeCloseTo(44.7319121056356, 8);
  expect(finance.NPER(0.025, 0, -2344)).toBe("Error - Cannot Calculate NPER");
  expect(finance.NPER(0, 0, -2000)).toBe("Error - Payment cannot be 0");
});

test("NPV Function (12 Test Cases / Match Excel to 8 decimal places)", () => {
  expect(finance.NPV(0.02, -50000, 91332, 95379, 83519)).toBeCloseTo(205802.267367961, 8);
  expect(finance.NPV(0.03, -43006, 60264, 23129, 34643)).toBeCloseTo(66997.3700499066, 8);
  expect(finance.NPV(0.09, -54404, 60439, 11971, 95653)).toBeCloseTo(77965.1756613633, 8);
  expect(finance.NPV(0.1, -80427, -89098, 47970, 40361)).toBeCloseTo(-83142.4882180179, 8);
  expect(finance.NPV(0.2, -12552, 41244, -93702, 84914)).toBeCloseTo(4906.01080246914, 8);
  expect(finance.NPV(0.11, 78850, 12109, 35278, 97086)).toBeCloseTo(170612.496985565, 8);
  expect(finance.NPV(0.19, -13182, 26250, 49352, 54732)).toBeCloseTo(64038.9109341756, 8);
  expect(finance.NPV(0.09, -41941, 21473, -20029, 61674)).toBeCloseTo(7820.76638912857, 8);
  expect(finance.NPV(0.18, -40433, 39029, 31605, -68195)).toBeCloseTo(-22173.6777380818, 8);
  expect(finance.NPV(0.04, -89316, 66418, 54279, 60256)).toBeCloseTo(75287.3200124295, 8);
  expect(finance.NPV(-1, -89316, 66418, 54279, 60256)).toBe("Error - Invalid Rate");
  expect(finance.NPV(0.04)).toBe("Error - Invalid Values");
});

test("IRR Function (102 Test Cases / Match Excel to 8 decimal places)", () => {
  let values = [-1500, 500, 500, 500, 500];
  expect(finance.IRR(values)).toBeCloseTo(0.12589832496236400, 8);
  values = [-33107, 8986, 2936, 8510, 6541, 9588, 5012, 7560, 2089, 6196, 2123, 4444, 3991, 4519, 5886, 5593, 7519];
  expect(finance.IRR(values)).toBeCloseTo(0.174949394095163, 8);
  values = [-59984, 5868, 9728, 7261, 2716, 1010, 8531, 3481, 8906, 7035, 1800, 2436, 6143, 9844, 1200, 1528, 848];
  expect(finance.IRR(values, 0.05)).toBeCloseTo(0.0390501326231925, 8);
  values = [-2094, 4828, 4436, 5411, 3812, 3078, 8445, 1216, 5862, 719, 5185, 7802, 7651, 7502, 2870, 9444, 8830];
  expect(finance.IRR(values)).toBeCloseTo(2.27149646972146, 8);
  values = [-5789, 9656, 3552, 3145, 937, 7895, 5289, 5401, 2628, 9250, 6217, 8547, 1174, 5184, 7134, 1878, 7788];
  expect(finance.IRR(values)).toBeCloseTo(1.17578739731306, 8);
  values = [-26123, 7904, 5590, 5135, 7734, 4108, 5758, 1641, 9560, 8408, 3171, 1791, 2781, 4965, 1301, 7841, 4834];
  expect(finance.IRR(values)).toBeCloseTo(0.213513834602972, 8);
  values = [-72516, 9380, 9904, 1621, 4865, 1719, 2035, 8052, 1121, 8063, 7801, 3823, 6174, 6697, 7225, 7975, 4764];
  expect(finance.IRR(values)).toBeCloseTo(0.0279382507851853, 8);
  values = [-83724, 5125, 6116, 2577, 6148, 7739, 4596, 1772, 1545, 1480, 5479, 3590, 7531, 5976, 4674, 1521, 4606];
  expect(finance.IRR(values)).toBeCloseTo(-0.0202144906431229, 8);
  values = [-55668, 6876, 4931, 981, 6336, 5573, 7523, 3393, 7586, 1683, 3696, 8538, 2634, 574, 7984, 4432, 8637];
  expect(finance.IRR(values)).toBeCloseTo(0.0479325401941348, 8);
  values = [-74831, 927, 4511, 2939, 3174, 7813, 1572, 1904, 4086, 4279, 7258, 1287, 2163, 840, 6923, 1867, 5739];
  expect(finance.IRR(values)).toBeCloseTo(-0.0288900855917343, 8);
  values = [-40159, 7094, 6911, 5052, 7119, 2838, 9047, 5306, 7665, 9261, 9873, 6337, 9909, 8706, 4022, 1978, 7282];
  expect(finance.IRR(values)).toBeCloseTo(0.148744957095722, 8);
  values = [-30711, 7762, 9208, 3458, 6544, 8360, 2014, 9252, 9159, 3116, 4694, 6756, 7420, 6383, 9220, 1893, 2819];
  expect(finance.IRR(values, 0.5)).toBeCloseTo(0.206165689676401, 8);
  values = [-36465, 3758, 9977, 7305, 9275, 6493, 9595, 6278, 2511, 5591, 9496, 3402, 7329, 3097, 9056, 7019, 1846];
  expect(finance.IRR(values)).toBeCloseTo(0.17204074176352, 8);
  values = [-25434, 4805, 6728, 9032, 3621, 6509, 4373, 838, 7753, 2428, 8229, 2324, 3578, 2343, 7826, 2153, 1617];
  expect(finance.IRR(values)).toBeCloseTo(0.198979236464614, 8);
  values = [-45734, 4535, 5959, 8212, 6114, 4171, 1645, 6077, 2590, 6887, 8295, 2422, 6499, 9147, 5000, 3768, 6926];
  expect(finance.IRR(values)).toBeCloseTo(0.0886425476261148, 8);
  values = [-5241, 4925, 3210, 5904, 6971, 5939, 9726, 945, 7138, 4817, 4691, 1074, 2154, 1575];
  expect(finance.IRR(values)).toBeCloseTo(0.925705228912066, 8);
  values = [-34517, 5232, 7785, 9682, 670, 9071, 639, 1354, 1949, 2623, 3097, 7562, 5060, 1183, 598, 2646, 746];
  expect(finance.IRR(values)).toBeCloseTo(0.0991588069021043, 8);
  values = [-45383, 1775, 3229, 9552, 3067, 1259, 633, 796, 8691, 6701, 4541, 1683, 9364, 9939, 2761, 3482, 5121];
  expect(finance.IRR(values)).toBeCloseTo(0.0552661856611101, 8);
  values = [-2233, 6352, 7961, 2860, 9952, 5798, 2701, 8352, 5951, 942, 1658, 574, 9559, 6403, 2154, 4808, 887];
  expect(finance.IRR(values)).toBeCloseTo(2.92368270599859, 8);
  values = [-46108, 7163, 6445, 1631, 5960, 6891, 6127, 8837, 6475, 7794, 2759, 4633, 9782, 6336, 5580, 4590, 1087];
  expect(finance.IRR(values)).toBeCloseTo(0.100257219308823, 8);
  values = [-16279, 1707, 9252, 3029, 3030, 1905, 4803, 5707, 7037, 8137, 7767, 6952, 6128, 1893, 5338, 506, 9773];
  expect(finance.IRR(values)).toBeCloseTo(0.274581861458764, 8);
  values = [-75893, 8486, 4987, 8356, 4044, 2839, 4439, 9814, 5044, 1270, 5113, 2363, 5469, 6118, 8503, 3738, 6099];
  expect(finance.IRR(values)).toBeCloseTo(0.0166227722156151, 8);
  values = [-76413, 9855, 8070, 7819, 7035, 1831, 5508, 1479, 6341, 6680, 7132, 8525, 4073, 996, 9694, 7217, 2978];
  expect(finance.IRR(values)).toBeCloseTo(0.0292325706451413, 8);
  values = [-28130, 7264, 6416, 4403, 827, 9231, 4841, 9077, 9912, 6973, 7731, 9724, 814, 3049, 8216, 8692, 4308];
  expect(finance.IRR(values, 0.033)).toBeCloseTo(0.20986347169394, 8);
  values = [-26246, 4771, 6822, 5439, 4194, 2274, 1990, 9654, 5836, 4174, 7480, 5455, 3780, 1213, 5560, 6238, 8477];
  expect(finance.IRR(values, 0.033)).toBeCloseTo(0.180559314435042, 8);
  values = [-6773, 6251, 3621, 9558, 4547, 7370, 3220, 6906, 5979, 2874, 9340, 1264, 6157, 7583, 5801, 8085, 1957];
  expect(finance.IRR(values)).toBeCloseTo(0.869923016519797, 8);
  values = [-66983, 5459, 3397, 1824, 2292, 1921, 521, 4134, 3574, 9389, 6214, 6023, 1965, 7684, 905, 5271, 2807];
  expect(finance.IRR(values)).toBeCloseTo(-0.00608790509782009, 8);
  values = [-5589, 3884, 3832, 2326, 7884, 1912, 641, 3887, 8167, 8929, 4345, 9278, 3384];
  expect(finance.IRR(values)).toBeCloseTo(0.69291851170448, 8);
  values = [-39617, 8964, 3815, 9398, 2979, 3117, 1485, 9179, 7588, 3782, 4304, 9322, 9714, 9469, 5960, 3338, 6756];
  expect(finance.IRR(values)).toBeCloseTo(0.132345712731346, 8);
  values = [-87578, 9165, 1995, 908, 2242, 1282, 6109, 1696, 4127, 6193, 545, 5189, 1296, 9274, 5510, 2254, 6951];
  expect(finance.IRR(values)).toBeCloseTo(-0.0313432361716035, 8);
  values = [-89996, 4678, 3836, 8429, 3931, 4859, 4692, 2404, 4211, 2471, 7551, 7053, 7443, 8142, 9409, 8080, 4606];
  expect(finance.IRR(values)).toBeCloseTo(0.00213648985687787, 8);
  values = [-52722, 9465, 2173, 2672, 8469, 6226, 1847, 948, 5861, 7564, 5910, 5350, 3235, 9034, 4693, 3989, 3582];
  expect(finance.IRR(values)).toBeCloseTo(0.0569940174443098, 8);
  values = [-69371, 6888, 6542, 4754, 6908, 1835, 9994, 8315, 7769, 3622, 7757, 8010, 3435, 2906, 7541, 8876, 4114];
  expect(finance.IRR(values)).toBeCloseTo(0.0462351431706527, 8);
  values = [-67898, 4904, 4684, 3136, 9522, 8254, 9868, 6605];
  expect(finance.IRR(values)).toBeCloseTo(-0.0773606207178078, 8);
  values = [-62136, 3213, 7263, 3157, 1286, 2631, 7037, 6898, 6767, 4366, 5254, 8588, 3200, 2609, 4718, 7059, 3571];
  expect(finance.IRR(values)).toBeCloseTo(0.0265826345632243, 8);
  values = [-65809, 2913, 8577, 6668, 7242, 1693, 6663, 6582, 4830, 8159, 9321, 7175, 9941, 2515, 9770, 2534, 2600];
  expect(finance.IRR(values)).toBeCloseTo(0.0502095993414857, 8);
  values = [-38094, 5497, 3758, 8151, 2787, 9916, 1661, 9996, 8613, 7780, 4486, 6829, 731, 2053, 1636, 5664, 6930];
  expect(finance.IRR(values)).toBeCloseTo(0.125948895372474, 8);
  values = [-27804, 3515, 3342, 7475, 3319, 8183, 4380, 900, 4095, 7098, 6338, 8613, 8600, 6886, 6699, 4320, 1235];
  expect(finance.IRR(values)).toBeCloseTo(0.163045824699048, 8);
  values = [-6635, 2094, 1020, 1578, 1177, 9312, 8650, 6620, 2071, 3109, 6645, 7924, 4443, 6804, 6497, 5331, 1201];
  expect(finance.IRR(values)).toBeCloseTo(0.431903898493571, 8);
  values = [-98206, 535, 9210, 2921, 4684, 6452, 5760, 7159, 4817, 9684, 5565, 3347, 9225, 2700, 9957, 3346, 8197];
  expect(finance.IRR(values)).toBeCloseTo(-0.00530335514327551, 8);
  values = [-36009, 6626, 8140, 5287, 6675, 8568, 625, 2167, 3002, 2786, 8163, 6989, 6196, 6960, 5471, 4725, 2458];
  expect(finance.IRR(values)).toBeCloseTo(0.136130246314114, 8);
  values = [-27850, 4628, 6884, 4358, 7763, 581, 7628, 4219, 4417, 780, 6525, 856, 4735, 1582, 3250, 5596, 6248];
  expect(finance.IRR(values)).toBeCloseTo(0.152187754495272, 8);
  values = [-84119, 2652, 1036, 7355, 3719, 7407, 1624, 8549, 1908, 2347, 5266, 3494, 5613, 2266, 4972, 4528, 6960];
  expect(finance.IRR(values)).toBeCloseTo(-0.0203777182097338, 8);
  values = [-18347, 9249, 5193, 841, 2495, 8950, 6792, 9605, 8299, 6819, 7175, 6003, 2229, 1222, 6306, 8205, 8068];
  expect(finance.IRR(values)).toBeCloseTo(0.327001292948963, 8);
  values = [-42509, 8593, 6427, 5677, 4951, 836, 900, 8574, 3809, 9710, 8691, 628, 8856, 5578, 7219, 9223, 3579];
  expect(finance.IRR(values)).toBeCloseTo(0.10967637787915, 8);
  values = [-60058, 1939, 6422, 7905, 5663, 3513, 4638, 6517];
  expect(finance.IRR(values)).toBeCloseTo(-0.107341705415961, 8);
  values = [-80109, 9076, 752, 4868, 6457, 4670, 3929, 6959, 2068, 727, 9814, 4679, 2534, 9025, 1438, 8627, 8585];
  expect(finance.IRR(values)).toBeCloseTo(0.00563217198693744, 8);
  values = [-6173, 3381, 9546, 1941, 8849, 7371, 7830, 7555, 6963, 9689, 8033, 1476, 2640, 8868, 9523, 2111, 8136];
  expect(finance.IRR(values)).toBeCloseTo(0.881034877071148, 8);
  values = [-16129, 3005, 882, 5518, 5660, 8201, 2780, 5614, 2150, 2133, 7424, 841, 745, 1087, 2113, 9092, 2251];
  expect(finance.IRR(values)).toBeCloseTo(0.228052979847972, 8);
  values = [-21681, 4120, 7462, 6772, 5704, 5228, 7064, 5607, 1401, 8017, 1615, 6963, 7641, 3853, 2630, 9329, 2017];
  expect(finance.IRR(values)).toBeCloseTo(0.253328073900283, 8);
  values = [-24854, 2842, 4646, 2157, 2714, 9015, 4689, 7863, 3108, 6190, 1380, 4753, 4515, 9341, 4142, 2347, 3634];
  expect(finance.IRR(values)).toBeCloseTo(0.159791841627102, 8);
  values = [-47412, 7842, 8994, 8133, 3944, 2575, 2391, 9659, 3646, 8732, 6014, 6783, 9541, 6647, 6374, 5138, 4657];
  expect(finance.IRR(values)).toBeCloseTo(0.110344461439964, 8);
  values = [-3924, 7039, 2247, 6320, 4806, 3028, 3297, 9086, 8430, 8713, 9703, 7966, 9336, 5397, 2496, 7956, 7186];
  expect(finance.IRR(values)).toBeCloseTo(1.43542559759587, 8);
  values = [-67273, 8980, 1026, 9887, 6602, 2239, 2254, 7011, 8812, 5021, 5028, 4490, 7985, 8154, 3290, 8021, 9696];
  expect(finance.IRR(values)).toBeCloseTo(0.0464599839712778, 8);
  values = [-2096, 2045, 3835, 631, 5211, 4138, 6493, 4001, 6362, 9846, 8071, 1470, 7366, 2748, 3986, 1199, 5513];
  expect(finance.IRR(values)).toBeCloseTo(1.24184855212715, 8);
  values = [-85067, 5463, 7346, 1205, 959, 7630, 9901, 8236, 7309, 3648, 8449, 2669, 7801, 2388, 8665, 835, 6306];
  expect(finance.IRR(values)).toBeCloseTo(0.00515999188210503, 8);
  values = [-41853, 9870, 9889, 4104, 8240, 3718, 3858, 9121, 8106, 2256, 5039, 9011, 4766, 8768, 7654, 9373, 5864];
  expect(finance.IRR(values)).toBeCloseTo(0.15108237365663, 8);
  values = [-21696, 9576, 9081, 2449, 4228, 9205, 7194, 892, 5351, 7987, 6590, 5047, 9828, 3996, 924, 1627, 4284];
  expect(finance.IRR(values)).toBeCloseTo(0.31012102453652, 8);
  values = [-88783, 7099, 4850, 6513, 7830, 571, 3129, 9750, 9627, 5837, 4354, 4111, 856, 4975, 3714, 7777, 8853];
  expect(finance.IRR(values)).toBeCloseTo(0.00140872528834857, 8);
  values = [-98047, 9824, 7016, 5160, 2318, 5816, 3035, 8486, 8702, 9296, 4549, 5367, 8477, 773, 5128, 6946, 6532];
  expect(finance.IRR(values)).toBeCloseTo(-0.00076877564021582, 8);
  values = [-55060, 7564, 5781, 4781, 8008, 7239, 1698, 2775, 6345, 6411, 6219, 5890, 7990, 2548, 5175, 2903, 5592];
  expect(finance.IRR(values)).toBeCloseTo(0.0634934913913772, 8);
  values = [-23068, 4103, 8403, 9247, 8910, 9706, 7515, 5995, 7056, 6377, 1315, 8943, 9419, 5179];
  expect(finance.IRR(values)).toBeCloseTo(0.302123890868139, 8);
  values = [-65825, 4763, 2598, 7526, 8735, 5234, 5784, 2214, 7935, 2840, 7708, 8672, 2428, 1630, 1033, 2015, 9009];
  expect(finance.IRR(values)).toBeCloseTo(0.0255547586563043, 8);
  values = [-18799, 8662, 1071, 6957, 2265, 801, 9871, 6625, 9716, 5664, 1781, 1469, 3629, 5763, 2824, 9002, 3562];
  expect(finance.IRR(values)).toBeCloseTo(0.27073675304728, 8);
  values = [-76095, 1871, 3571, 7747, 6811, 6558, 9088, 7459, 1353, 8503, 3875, 6858, 681, 3099, 926, 5775, 8889];
  expect(finance.IRR(values)).toBeCloseTo(0.01073075240248, 8);
  values = [-96159, 5759, 1622, 4159, 8965, 5479, 1861, 9024, 911, 3575, 6660, 7121, 8641, 7460, 998, 9963, 4228];
  expect(finance.IRR(values)).toBeCloseTo(-0.0116705529293796, 8);
  values = [-20513, 3546, 8579, 610, 9796, 6738, 9698, 5443, 6292, 8036, 5108, 7972, 6081, 8371, 6213, 2066, 6479];
  expect(finance.IRR(values)).toBeCloseTo(0.283942054735878, 8);
  values = [-70134, 6839, 8131, 9110, 3057, 7444, 6139, 521, 9782, 4116, 3310, 6870, 2502, 2697, 2390, 5468, 5792];
  expect(finance.IRR(values)).toBeCloseTo(0.0253100423097223, 8);
  values = [-18123, 1844, 5720, 4737, 8190, 9899, 3309, 3198, 2351, 5156, 3747, 1492, 9347, 7057, 4876, 9579, 2896];
  expect(finance.IRR(values)).toBeCloseTo(0.262008244320459, 8);
  values = [-95624, 3041, 4440, 2518, 2552, 8936, 2801, 5207, 3743, 8439, 1744, 4130, 8839, 3991, 3576, 1364, 4465];
  expect(finance.IRR(values)).toBeCloseTo(-0.0349062093945272, 8);
  values = [-47852, 7564, 2095, 1572, 1226, 2915, 6339, 3688, 8783, 642, 6183, 1459, 6753, 9584, 981, 7930, 5393];
  expect(finance.IRR(values)).toBeCloseTo(0.0496907321208067, 8);
  values = [-95034, 4823, 6258, 9788, 4413, 3718, 2914, 5217, 3112, 3674, 9034, 9297, 8179, 7769, 8890, 6086, 2899];
  expect(finance.IRR(values)).toBeCloseTo(0.0012309241130084, 8);
  values = [-97835, 6923, 3966, 5006, 3769, 820, 8299, 6075, 2839, 1912, 546, 5367, 1463, 3692, 6984, 5109, 8724];
  expect(finance.IRR(values)).toBeCloseTo(-0.0335249795737448, 8);
  values = [-55988, 8280, 7571, 1406, 627, 738, 6666, 7165, 6380, 3107, 6560, 9768, 2251, 8321, 1667, 7130, 5638];
  expect(finance.IRR(values)).toBeCloseTo(0.0493159870027737, 8);
  values = [-22048, 3063, 6059, 3999, 5384, 9125, 7039, 6983, 5880, 7290, 8676, 2197, 5858, 6338, 6240, 5960, 2786];
  expect(finance.IRR(values)).toBeCloseTo(0.241291296308497, 8);
  values = [-47329, 2606, 9050, 7245, 7997, 9596, 2555, 8437, 8644, 8079, 3834, 3905, 2142, 3013, 6066, 6693, 7150];
  expect(finance.IRR(values)).toBeCloseTo(0.106512692729435, 8);
  values = [-51351, 6539, 4979, 6481, 8665, 2388, 5746, 5742, 9887, 9308, 9418, 5137, 9879, 8026, 2799, 7970, 1610];
  expect(finance.IRR(values)).toBeCloseTo(0.0988073932802267, 8);
  values = [-83076, 9552, 4983, 3266, 1035, 2082, 4965, 7024, 5124, 2340, 5526, 6545, 546, 1451, 6456, 704, 4168];
  expect(finance.IRR(values)).toBeCloseTo(-0.0287707599827218, 8);
  values = [-44006, 9811, 1643, 5465, 6201, 9958, 5974, 6080, 5710, 3214, 5896, 2925, 934, 2575, 1908, 6392, 9321];
  expect(finance.IRR(values)).toBeCloseTo(0.0987976549400171, 8);
  values = [-32788, 5666, 2866, 2445, 7153, 7098, 9295, 3070, 5949, 4830, 3418, 3149, 5402, 1141, 7812, 3706, 1516];
  expect(finance.IRR(values)).toBeCloseTo(0.12731031388219, 8);
  values = [-95353, 3721, 9109, 6578, 1243, 5625, 7659, 7382, 1222, 7725, 8620, 3472, 5979, 2654, 5382, 1158, 2021];
  expect(finance.IRR(values)).toBeCloseTo(-0.02285406225079, 8);
  values = [-95165, 1571, 3015, 2861, 9300, 3665, 7693, 3947, 7412, 6337, 3119, 2204, 1805, 7872, 6229, 3234, 5524];
  expect(finance.IRR(values)).toBeCloseTo(-0.0249308027939343, 8);
  values = [-81292, 3438, 9000, 6189, 8003, 6850, 6278, 4613, 9170, 6369, 7058, 9868, 546, 6743, 4509, 3481, 6779];
  expect(finance.IRR(values)).toBeCloseTo(0.0251545419012544, 8);
  values = [-74148, 7729, 9471, 7032, 9388, 1974, 4624, 3531, -7556, 8963, 4039, 7658, 9455, 6329, 5379, 6585, 4527];
  expect(finance.IRR(values)).toBeCloseTo(0.0234271508477322, 8);
  values = [-92328, 9942, 2444, 9419, 4837, 4297, 8774, 4484, 8136, 6935, 8226, 3513, 3274, 5480, 4246, 5381, 5455];
  expect(finance.IRR(values)).toBeCloseTo(0.00340008273146353, 8);
  values = [-75106, 2867, 6661, 3804, 5530, 8634, 7384, 5731, 8793, 7655, 5995, 5054, 7156, 1639, 8654, 5484, 648];
  expect(finance.IRR(values)).toBeCloseTo(0.0252310720322964, 8);
  values = [-14493, 5653, 4270, 5141, 2930, 6950, 1055, 8686, 9349, 630, 2415, 8864, 6815, 4528, 3915, 6020, 7607];
  expect(finance.IRR(values)).toBeCloseTo(0.340053579999745, 8);
  values = [-21588, 5948, 1441, 4076, 3412, 9044, 4098, 6480, 7627, 6629, 7260, 8531, 5866, 3957, 7367, 3485, 5830];
  expect(finance.IRR(values)).toBeCloseTo(0.225801748054267, 8);
  values = [-88874, 5390, 8613, 3944, 7857, 1728, 5162, 7709, 7850, 581, 557, 8227, 8470, 2256, 9999, 5407, 1624];
  expect(finance.IRR(values)).toBeCloseTo(-0.00484646237667674, 8);
  values = [-44628, 3863, 3730, 5633, 9389, 2183, 7707, 5635, 8654, 9409, 9803, 3370, 3952, 3179, 7513, 6196, 6620];
  expect(finance.IRR(values)).toBeCloseTo(0.104489206073922, 8);
  values = [-17301, 5722, 6818, 6309, 2147, 2836, 2277, 5838, 9397, 4516, 9216, 9553, 3579, 4989, 9820, 7425, 4802];
  expect(finance.IRR(values)).toBeCloseTo(0.308863146424214, 8);
  values = [-8525, 2095, 9123, 7326, 4812, 4792, 8416, 6654, 3797, -7929, 5158, 1769, 2388, 5514, 8758, 8191, 6435];
  expect(finance.IRR(values)).toBeCloseTo(0.609955956156352, 8);
  values = [-24263, 1027, 5305, 2753, 4279, 7544, 4189, 8993, 2255, 6744, 1079, 9608, 8415, 3662, 615, 7689, 6737];
  expect(finance.IRR(values)).toBeCloseTo(0.169078586855392, 8);
  values = [-96685, 1875, 1291, 628, 5072, 1025, 1102, 1697, 4480, 8826, 4472, 8960, 3293, 2510, 1669, 7238, 3418];
  expect(finance.IRR(values)).toBeCloseTo(-0.0493497279298704, 8);
  values = [-92626, 6227, 602, 6359, 8124, 695, 4672, 1997, 1263, 2255, 2978, 8085, 5485, 6919, 984, 3684, 2741];
  expect(finance.IRR(values)).toBeCloseTo(-0.0429469886417285, 8);
  values = [-13566, 9244, 1635, 1461, 5606, 9475, 5681, 1910, 8082, 9628, 7640, -8940, 3230, 4477, 880, 3727, 4763];
  expect(finance.IRR(values)).toBeCloseTo(0.392813177962573, 8);
  values = [-32503, 4931, 3747, 8582, 2011, 590, 7842, 5244, 9025, 8701, 8438, 1575, 1737, 4377, 2548, 9879, 4139];
  expect(finance.IRR(values)).toBeCloseTo(0.137741017391808, 8);
  values = [-99527, 6181, 3492, 3737, 616, 3100, 5286, 9831, 9122, 5941, 4167, 5441, 1480, 9285, 2534, 5205, 6115];
  expect(finance.IRR(values)).toBeCloseTo(-0.0217841182893732, 8);
  values = [-16750, 6650, 6568, 1235, 2570, 4399, 2256, 8048, 9657, 3550, 7914, 8798, -3760, 4433, 6288, 6484, 5936];
  expect(finance.IRR(values)).toBeCloseTo(0.292054814798284, 8);
  expect(finance.IRR(values, -2)).toBe("Error - invalid guess");
  values = [16750, 6650, 6568, 1235];
  expect(finance.IRR(values)).toBe("Error - invalid values");
  values = [-16750, -6650, -6568, -1235];
  expect(finance.IRR(values)).toBe("Error - invalid values");
});
